/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package comnieu.ui;


import java.awt.Dialog;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;
import lombok.Setter;
import comnieu.dao.CategoryDAO;
import comnieu.dao.DishDAO;
import comnieu.dao.impl.CategoryDAOImpl;
import comnieu.dao.impl.DishDAOImpl;
import comnieu.entity.Bill;
import comnieu.entity.BillDetail;
import comnieu.entity.Category;
import comnieu.entity.Dish;
import comnieu.util.XDialog;

/**
 *
 * @author Admin
 */
public class DishJDialog extends JDialog implements DishController { 
@Setter Bill bill ;
    /**
     * Creates new form DishJDialog
     * @param owner
     * @param modal
     */

public DishJDialog(Dialog owner, boolean modal) {
    super(owner, modal);
    initComponents();
        tblDishes.setDefaultEditor(Object.class, null);
tblCategories.setDefaultEditor(Object.class, null);
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDishes = new javax.swing.JTable();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Loại đồ uống"
            }
        ));
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategories);

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        tblDishes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã", "Tên đồ uống", "đơn giá", "Giảm giá"
            }
        ));
        tblDishes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDishesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDishes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        // TODO add your handling code here:
 this.fillDishes();

    }//GEN-LAST:event_tblCategoriesMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void tblDishesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDishesMouseClicked
        // TODO add your handling code here:
         
        if(evt.getClickCount() == 2){ 
this.addDishToBill();
        }
    }//GEN-LAST:event_tblDishesMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open(); 

    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
public static void main(String[] args) {
    java.awt.EventQueue.invokeLater(() -> {
        DishJDialog dialog = new DishJDialog((Dialog) null, true);
        dialog.setLocationRelativeTo(null); // căn giữa màn hình
        dialog.setVisible(true);
    });
}

CategoryDAO categoryDao = new CategoryDAOImpl();
    List<Category> categories = List.of();
    DishDAO dishDao = new DishDAOImpl();
    List<Dish> dishes = List.of();
@Override 
public void open() { 
    this.setLocationRelativeTo(null); 
    this.fillCategories(); 
    this.fillDishes(); 
} 
@Override 
public void fillCategories() {
    try {
        categories = categoryDao.findAll(); 
        DefaultTableModel model = (DefaultTableModel) tblCategories.getModel(); 
        model.setRowCount(0); 
        categories.forEach(c -> model.addRow(new Object[] {c.getName()})); 
        if (!categories.isEmpty()) {
            tblCategories.setRowSelectionInterval(0, 0); 
            fillDishes(); 
        }
    } catch (Exception e) {
        XDialog.alert("❌ Lỗi khi tải danh mục: " + e.getMessage());
    }
}


 @Override
    public void fillDishes() {
        try {
            int row = tblCategories.getSelectedRow();
            if (row < 0 || row >= categories.size()) return;

            Category category = categories.get(row);
            dishes = dishDao.findByCategoryId(category.getId());
            DefaultTableModel model = (DefaultTableModel) tblDishes.getModel();
            model.setRowCount(0);
            dishes.forEach(d -> {
                Object[] rowData = {
                    d.getId(),
                    d.getName(),
                    String.format("%.0f₫", d.getUnitPrice())
                };
                model.addRow(rowData);
            });
        } catch (Exception e) {
            XDialog.alert("❌ Lỗi khi tải danh sách món ăn: " + e.getMessage());
        }
    }

    @Override
    public void addDishToBill() {
        try {
            String quantityStr = XDialog.prompt("Số lượng?");
            if (quantityStr == null || quantityStr.trim().isEmpty()) return;

            int quantity = Integer.parseInt(quantityStr.trim());
            if (quantity <= 0) {
                XDialog.alert("⚠️ Số lượng phải là số nguyên dương!");
                return;
            }

            Dish dish = dishes.get(tblDishes.getSelectedRow());
            BillDetail detail = new BillDetail();
            detail.setBillId(bill.getId());
            detail.setDishId(dish.getId());
            detail.setUnitPrice(dish.getUnitPrice());
            detail.setQuantity(quantity);
            new comnieu.dao.impl.BillDetailDAOImpl().create(detail);
            XDialog.alert("✅ Đã thêm món ăn vào phiếu!");
        } catch (NumberFormatException e) {
            XDialog.alert("❌ Số lượng phải là một số nguyên hợp lệ!");
        } catch (Exception e) {
            XDialog.alert("❌ Lỗi khi thêm món ăn: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTable tblDishes;
    // End of variables declaration//GEN-END:variables

   



}
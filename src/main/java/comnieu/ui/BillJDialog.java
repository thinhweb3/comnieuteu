/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package comnieu.ui;

import comnieu.ui.BillController;
import comnieu.dao.BillDAO;
import comnieu.dao.BillDetailDAO;
import comnieu.dao.DiningTableDAO;
import comnieu.dao.DishDAO;
import comnieu.dao.EmployeeDAO;
import comnieu.dao.impl.BillDAOImpl;
import comnieu.dao.impl.BillDetailDAOImpl;
import comnieu.dao.impl.DiningTableDAOImpl;
import comnieu.dao.impl.DishDAOImpl;
import comnieu.dao.impl.EmployeeDAOImpl;
import comnieu.entity.Bill;
import comnieu.entity.BillDetail;
import comnieu.entity.DiningTable;
import comnieu.entity.Dish;
import comnieu.ui.BillController;
import comnieu.util.XDate;
import comnieu.util.XDialog;
import java.awt.Dialog;
import java.util.Date;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;
import comnieu.net.Message;
import comnieu.net.SocketServer;
import javax.swing.SwingUtilities;

/**
 *
 * @author Admin
 */
public class BillJDialog extends javax.swing.JDialog implements BillController { 
    private DishDAO dishDAO = new DishDAOImpl();
    private Bill bill;
    private final BillDAO billDao = new BillDAOImpl();
    private final BillDetailDAO billDetailDao = new BillDetailDAOImpl();
    private final DiningTableDAO tableDao = new DiningTableDAOImpl();
    private final EmployeeDAO employeeDao = new EmployeeDAOImpl();
    private List<BillDetail> details = List.of();
@Override
public void setBill(Bill bill) {
    this.bill = bill;
}

    /**
     * Creates new form BillJDialog
     * @param parent
     * @param modal
     */
public BillJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        btnPayQR.addActionListener(e -> showVietQRDialog());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtCardId = new javax.swing.JTextField();
        txtCheckin = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        txtCheckout = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBillDetails = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        btnPayQR = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Mã phiếu");

        jLabel2.setText("Thẻ số");

        jLabel3.setText("Thời điểm đặt hàng");

        jLabel4.setText("Nhân viên");

        jLabel5.setText("Trạng thái");

        jLabel6.setText("Thời điểm thanh toán");

        tblBillDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Món Ăn", "Đơn giá ", "Giảm giá", "Số lượng", "thành tiền", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblBillDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBillDetails);

        btnAdd.setText("Thêm đồ ăn");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Xóa đồ ăn");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCancel.setText("Hủy phiếu");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnCheckout.setText("Thanh toán");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        btnPayQR.setText("Thanh Toán Online");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtStatus))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))))
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtCheckout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCheckin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPayQR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCheckout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnCancel)
                    .addComponent(btnCheckout)
                    .addComponent(btnRemove)
                    .addComponent(btnPayQR))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
           this.showDrinkJDialog(); 
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
                this.removeDrinks(); 

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
                this.checkout(); 

    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
         this.cancel(); 
        
    }//GEN-LAST:event_btnCancelActionPerformed

    private void tblBillDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillDetailsMouseClicked
        // TODO add your handling code here:
                if (evt.getClickCount() == 2) { 
            this.updateQuantity(); 
        } 
    }//GEN-LAST:event_tblBillDetailsMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
                this.open(); 
                
                    if (App.SERVER_SINGLETON != null) {
        App.SERVER_SINGLETON.onMessage((Message msg) -> {
            SwingUtilities.invokeLater(() -> {
                    if ("BILL_CREATED".equals(msg.type) || "BILL_UPDATED".equals(msg.type)) {
                    // chỉ refresh khi đúng bàn của bill hiện tại
                    if (bill != null && msg.tableId == bill.getTableId()) {
                        fillBillDetails();   // ← không addRow ở đây
                    }
                }

            });
        });
    }

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
                this.close(); 






    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
   public static void main(String[] args) {
    java.awt.EventQueue.invokeLater(() -> {
        BillDAO billDao = new BillDAOImpl();
        Long billId = 10005L; // 🔁 Thay bằng ID bill bạn muốn test

        Bill bill = billDao.findById(billId);

        if (bill != null) {
            BillJDialog dialog = new BillJDialog(new java.awt.Frame(), true); // dùng null nếu không có JFrame
            dialog.setBill(bill); // ⚠️ Quan trọng: setBill trước khi hiển thị
            dialog.setLocationRelativeTo(null); // mở giữa màn hình
            dialog.setVisible(true);
        } else {
            System.out.println("❌ Không tìm thấy Bill với ID: " + billId);
        }
    });
}


  
@Override 
public void removeDrinks() {
    try {
        for (int i = 0; i < tblBillDetails.getRowCount(); i++) {
            Boolean checked = (Boolean) tblBillDetails.getValueAt(i, 5);
            if (checked != null && checked) {
                billDetailDao.deleteById(details.get(i).getId());
            }
        }
        this.fillBillDetails();
    } catch (Exception e) {
        XDialog.alert("Lỗi khi xóa đồ uống: " + e.getMessage());
    }
}


@Override
public void showDrinkJDialog() {
    DishJDialog dialog = new DishJDialog(this, true); // ✅ Dùng chính BillJDialog làm owner
    dialog.setBill(bill);
    dialog.setVisible(true);
    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosed(java.awt.event.WindowEvent e) {
            BillJDialog.this.fillBillDetails();
        }
    });
}
@Override 
public void updateQuantity() {
    try {
        if (bill.getStatus() == 0) {
            String input = XDialog.prompt("Số lượng mới?");
            if (input != null && input.length() > 0) {
                int newQuantity = Integer.parseInt(input);
                BillDetail detail = details.get(tblBillDetails.getSelectedRow());
                detail.setQuantity(newQuantity);
                billDetailDao.update(detail);
                this.fillBillDetails();
            }
        }
    } catch (Exception e) {
        XDialog.alert("Lỗi khi cập nhật số lượng: " + e.getMessage());
    }
}
 
@Override 
public void checkout() {
    try {
        if (XDialog.confirm("Bạn muốn thanh toán phiếu bán hàng?")) {
            bill.setStatus(Bill.BillStatus.Completed.getValue());
            bill.setCheckOut(new Date());
            billDao.update(bill);
            this.setForm(bill);
        }
    } catch (Exception e) {
        XDialog.alert("Lỗi khi thanh toán: " + e.getMessage());
    }
}
 
@Override 
public void cancel() {
    try {
        if (details.isEmpty()) {
            billDao.deleteById(bill.getId());
            this.dispose();
        } else if (XDialog.confirm("Bạn muốn hủy phiếu bán hàng?")) {
            bill.setStatus(Bill.BillStatus.Completed.getValue());
            billDao.update(bill);
            this.setForm(bill);
        }
    } catch (Exception e) {
        XDialog.alert("Lỗi khi hủy phiếu: " + e.getMessage());
    }
}

void setForm(Bill bill) {
    txtId.setText(String.valueOf(bill.getId())); 
    txtCardId.setText("Bàn #" + bill.getTableId());
    txtCheckin.setText(XDate.format(bill.getCheckIn(), "HH:mm:ss dd-MM-yyyy")); 
    txtUsername.setText(employeeDao.findById(bill.getEmployeeId()).getUsername());
    String[] statuses = {"Servicing", "Completed", "Canceled"}; 
    txtStatus.setText(statuses[bill.getStatus()]); 
    if (bill.getCheckOut() != null) { 
        txtCheckout.setText(XDate.format(bill.getCheckOut(), "HH:mm:ss dd-MM-yyyy")); 
    }

    DiningTableDAO tableDao = new DiningTableDAOImpl();
    DiningTable table = tableDao.findById(bill.getTableId());

       boolean editable = bill.getStatus() == Bill.BillStatus.Servicing.getValue()
                && table != null
                && table.getStatus() == 1;
        btnAdd.setEnabled(editable); 
        btnCancel.setEnabled(editable); 
        btnCheckout.setEnabled(editable); 
        btnRemove.setEnabled(editable); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnPayQR;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBillDetails;
    private javax.swing.JTextField txtCardId;
    private javax.swing.JTextField txtCheckin;
    private javax.swing.JTextField txtCheckout;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
   @Override
    public void fillBillDetails() {
        String idText = txtId.getText();
        if (idText == null || idText.trim().isEmpty()) {
            details = List.of();
            ((DefaultTableModel) tblBillDetails.getModel()).setRowCount(0);
            return;
        }

        try {
            Long billId = Long.parseLong(idText);
            details = billDetailDao.findByBillId(billId);


            DefaultTableModel model = (DefaultTableModel) tblBillDetails.getModel();
            model.setRowCount(0);
            for (BillDetail d : details) {
                Dish dish = dishDAO.findById(d.getDishId());
                Object[] row = {
                    dish != null ? dish.getName() : "",
                    d.getUnitPrice(),
                    "", // discount chưa có
                    d.getQuantity(),
                    d.getUnitPrice().multiply(new java.math.BigDecimal(d.getQuantity())),
                    Boolean.FALSE
                };
                model.addRow(row);
            }

        } catch (NumberFormatException ex) {
            XDialog.alert("Mã phiếu không hợp lệ: " + idText);
            ((DefaultTableModel) tblBillDetails.getModel()).setRowCount(0);
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải chi tiết phiếu: " + e.getMessage());
            ((DefaultTableModel) tblBillDetails.getModel()).setRowCount(0);
        }
    }

@Override
public void open() {
    if (bill != null) {
        setForm(bill);
        fillBillDetails();
    } else {
        XDialog.alert("Không có dữ liệu phiếu để hiển thị.");
        dispose(); // đóng nếu không có bill
    }
}

@Override
public void close() {
    this.dispose(); // đóng dialog
}
private static String urlEncode(String s) {
    try {
        return java.net.URLEncoder.encode(s, java.nio.charset.StandardCharsets.UTF_8.toString());
    } catch (Exception e) {
        return s;
    }
}

private String buildVietQRUrl(String bankCode, String accountNo, long amount, String addInfo) {
    String template = "compact"; // hoặc "print"
    String base = String.format("https://img.vietqr.io/image/%s-%s-%s.png", bankCode, accountNo, template);
    return String.format("%s?amount=%d&addInfo=%s", base, amount, urlEncode(addInfo));
}

private long calcBillTotalVND() {
    long total = 0;
    for (int i = 0; i < tblBillDetails.getRowCount(); i++) {
        // cột thành tiền (index 4) đang là BigDecimal
        Object v = tblBillDetails.getValueAt(i, 4);
        if (v instanceof java.math.BigDecimal bd) {
            total += bd.longValue();
        } else if (v != null) {
            try { total += Long.parseLong(v.toString().replaceAll("\\D","")); } catch (Exception ignore) {}
        }
    }
    return total;
}

private void showVietQRDialog() {
    // 1) Tính tiền & nội dung CK
    long amount = calcBillTotalVND();
    String addInfo = "BILL-" + bill.getId() + "-TABLE-" + bill.getTableId();

    // 2) URL VietQR
    String bankCode = "Timo";        // TODO: đổi sang ngân hàng của bạn
    String accountNo = "0337817635"; // TODO: đổi sang STK nhận tiền
    String qrUrl = buildVietQRUrl(bankCode, accountNo, amount, addInfo);

    // 3) Tải ảnh QR (qua URL)
    javax.swing.JLabel img = new javax.swing.JLabel("Đang tải QR...");
    new Thread(() -> {
        try {
            java.awt.Image imgData = javax.imageio.ImageIO.read(new java.net.URL(qrUrl));
            if (imgData != null) {
                java.awt.Image scaled = imgData.getScaledInstance(100, 100, java.awt.Image.SCALE_SMOOTH);
                javax.swing.ImageIcon icon = new javax.swing.ImageIcon(imgData);
                img.setText(null);
                img.setIcon(icon);
            } else {
                img.setText("Không tải được QR");
            }
        } catch (Exception ex) {
            img.setText("Lỗi tải QR: " + ex.getMessage());
        }
    }).start();

    // 4) Dialog hiển thị
    javax.swing.JPanel panel = new javax.swing.JPanel(new java.awt.BorderLayout(10,10));
    javax.swing.JLabel lblInfo = new javax.swing.JLabel(
        "<html>Tổng tiền: <b>" + String.format("%,d", amount) + "₫</b><br/>" +
        "Nội dung CK: <b>" + addInfo + "</b><br/>" +
        "Ngân hàng: <b>" + bankCode + "</b> – STK: <b>" + accountNo + "</b></html>"
    );
    panel.add(lblInfo, java.awt.BorderLayout.NORTH);
    panel.add(new javax.swing.JScrollPane(img), java.awt.BorderLayout.CENTER);

    javax.swing.JButton btnConfirm = new javax.swing.JButton("Đã nhận tiền");
    javax.swing.JButton btnClose = new javax.swing.JButton("Đóng");

    javax.swing.JPanel south = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
    south.add(btnConfirm);
    south.add(btnClose);
    panel.add(south, java.awt.BorderLayout.SOUTH);

    javax.swing.JDialog d = new javax.swing.JDialog(this, "Thanh toán VietQR", true);
    d.setContentPane(panel);
    d.setSize(600, 605);
    d.setLocationRelativeTo(this);

    btnConfirm.addActionListener(e -> {
        try {
            bill.setStatus(Bill.BillStatus.Completed.getValue());
            bill.setCheckOut(new java.util.Date());
            billDao.update(bill);
            this.setForm(bill);
            javax.swing.JOptionPane.showMessageDialog(d, "Đã xác nhận thanh toán.");
            d.dispose();
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(d, "Lỗi cập nhật bill: " + ex.getMessage());
        }
    });
    btnClose.addActionListener(e -> d.dispose());

    d.setVisible(true);
}

public class App {
    // Manager sẽ gán biến này khi mở server. Employee để null.
    public static SocketServer SERVER_SINGLETON = null;
}
}
